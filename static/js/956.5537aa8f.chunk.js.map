{"version":3,"file":"static/js/956.5537aa8f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","constants/theme.jsx","constants/contactValidationSchema.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/EditContactForm/EditContactForm.styled.jsx","components/EditContactForm/EditContactForm.jsx","components/ListItem/ListItem.styled.jsx","components/ListItem/ListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/UserMenu/UserMenu.styled.jsx","components/UserMenu/UserMenu.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst FormLabel = styled.label`\n    display: block;\n    text-align: center;\n    color: ${props => props.theme.darkGrey};\n    font-weight: 600;\n`\nconst FormInput = styled.input`\n    display: block;\n    width: 340px;\n    height: 24px;\n     margin-bottom: 24px;\n     margin-top: 8px;\n     padding-left: 8px;\n    border: 1px solid ${props => props.theme.darkBlue};\n    border-radius: 5px;\n    \n`\nconst SubmitBtn = styled.button`\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    width: 148px;\n    height: 40px;\n    border-style: solid;\n    border-radius: 5px;\n    border-width: 2px;\n    border-color: ${props => props.theme.darkBlue};\n    background-color: ${props => props.theme.darkBlue};\n    color: white;\n    font-size: 16px;\n    cursor: pointer;\n    transition-property: transform;\n  transition-duration: 500ms;\n\n    &:hover {\n       transform: scale(1.08);\n    }\n`\nconst ErrorMessage = styled.div`\n   margin-bottom: 12px;\n    font-weight: 400;\n    font-size: 12px;\n    width: 340px;\n    color: red;\n    text-align: left;\n`\n\nexport { FormLabel, FormInput, SubmitBtn, ErrorMessage };","const theme = {\n    darkBlue: '#0c005a',\n    red: '#bc2525',\n    green: '#00420b',\n    darkGrey: '#323643',\n    lightGray: '#787675'\n}\n\nexport default theme;","import * as Yup from 'yup';\n\nexport const contactValidationSchema = Yup.object({\n  name: Yup.string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, '* Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore')\n    .required('* Required'),\n  number: Yup.string()\n    .matches(/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/, '* Phone number must be digits and can contain spaces, dashes, parentheses in country code and can start with +')\n    .required('* Required'),\n  \n});\n","import { Formik } from 'formik';\nimport { contactValidationSchema } from 'constants/contactValidationSchema';\nimport { useSelector } from \"react-redux\";\nimport { FormLabel, FormInput, SubmitBtn, ErrorMessage } from './ContactForm.styled';\nimport { useAddContactMutation, useGetContactsQuery } from '../../redux/ContactsOperations/ContactsOperations';\nimport { getToken } from '../../redux/AuthSlice/AuthSlice';\n\n\nconst ContactForm = () => {\n  const token = useSelector(getToken);\n  const [addContact] = useAddContactMutation();\n  const {data: contacts} = useGetContactsQuery(token, { skip: token === null });\n\n  const handleSubmit = (values, { resetForm }) => {\n    \n    if (contacts.some(contact => contact.name.toLowerCase() === values.name.toLowerCase()))\n    {\n      resetForm();\n      return alert(`${values.name} is already in contacts`);\n    }\n    \n    addContact({ token: token, name: values.name, number: values.number});\n    resetForm();\n\n  };\n\n  return (\n    \n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={contactValidationSchema}\n      onSubmit={(values, actions) => handleSubmit(values, actions)}\n    >\n      {formik => (\n\n        <form onSubmit={formik.handleSubmit}>\n\n        <FormLabel htmlFor=\"name\">\n          Name\n            <FormInput\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              {...formik.getFieldProps('name')}\n            />\n            {formik.touched.name && formik.errors.name ? (\n             <ErrorMessage>{formik.errors.name}</ErrorMessage>\n           ) : null}\n          </FormLabel>\n          \n          <FormLabel htmlFor=\"number\">\n            Number\n              <FormInput\n                id=\"number\"\n                name=\"number\"\n                type=\"text\"\n                {...formik.getFieldProps('number')}\n            />\n            {formik.touched.number && formik.errors.number ? (\n             <ErrorMessage>{formik.errors.number}</ErrorMessage>\n           ) : null}\n          </FormLabel>\n\n        <SubmitBtn type=\"submit\">Add contact</SubmitBtn>\n \n      </form>\n      )\n      }\n      \n      </Formik>\n\n  );\n};\n\nexport default ContactForm;","import React from 'react';\nimport { FormLabel, FormInput } from '../ContactForm/ContactForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { change } from 'redux/FilterSlice/FilterSlice';\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = (e) => {\n    dispatch(change(e.currentTarget.value))\n  }\n\n  return (\n  <FormLabel>\n    Find contacts by name\n    <FormInput\n      autoComplete=\"off\"\n      type=\"text\"\n        name=\"filter\"\n      onChange={onChange}\n      required\n    />\n  </FormLabel>\n)\n  \n};\n\nexport default Filter;","import styled from 'styled-components';\n\nconst InputsWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst FormLabel = styled.label`\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 8px;\n    align-items: center;\n    font-size: 14px;\n    color: #323643;\n    font-weight: 600;\n`\nconst FormInput = styled.input`\n    width: 268px;\n    height: 20px;\n    padding-left: 6px;\n    border: 0.5px solid ${props => props.theme.darkBlue};\n    border-radius: 5px;\n`\nconst ButtonsWrapper = styled.div`\n     margin-left: 74px;\n     margin-bottom: 16px;\n`\nconst CancelButton = styled.button`\n    margin-right: 8px;\n    border: 0.5px solid ${props => props.theme.red};\n    border-radius: 5px;\n    background-color: transparent;\n    color: ${props => props.theme.red};\n    cursor: pointer;\n    \n`\nconst ConfirmButton = styled.button`\n  \n    border: 0.5px solid ${props => props.theme.green};\n    border-radius: 5px;\n    background-color: transparent;\n    color: ${props => props.theme.green};\n    cursor: pointer;\n`\n\nexport { InputsWrapper, FormLabel, FormInput, ButtonsWrapper, CancelButton, ConfirmButton };","import PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { contactValidationSchema } from 'constants/contactValidationSchema';\nimport { useGetContactsQuery, useEditContactMutation } from 'redux/ContactsOperations/ContactsOperations';\nimport { InputsWrapper, FormLabel, FormInput, ButtonsWrapper, CancelButton, ConfirmButton } from './EditContactForm.styled';\nimport { ErrorMessage } from '../ContactForm/ContactForm.styled';\nimport { useSelector } from 'react-redux';\nimport { getToken } from 'redux/AuthSlice/AuthSlice';\n\nconst EditContactForm = ({ id, onClose }) => {\n    const [editContact] = useEditContactMutation();\n    const token = useSelector(getToken);\n\n    const { data: contacts } = useGetContactsQuery(token, { skip: token === null });\n    const contact = contacts.find(contact => contact.id === id);\n\n\n    const handleSubmit = (values) => {\n        \n        editContact({\n            contactId: id, \n            token: token,\n            name: values.name,\n            number: values.number\n        });\n        \n        onClose();\n}\n\n    return (\n      contact &&\n             <Formik\n      initialValues={{ name: contact.name, number: contact.number }}\n      validationSchema={contactValidationSchema}\n      onSubmit={(values) => handleSubmit(values)}\n    >\n            {\n                    formik => (\n                        <form onSubmit={formik.handleSubmit} autoComplete='off'>\n                    <InputsWrapper>\n                        <FormLabel htmlFor=\"name\">\n                            Name\n                        <FormInput\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                    \n                        {...formik.getFieldProps('name')}\n                        />\n                        </FormLabel>\n                            <div>\n                {formik.touched.name && formik.errors.name ? (\n                <ErrorMessage>{formik.errors.name}</ErrorMessage>\n            ) : null}\n                            </div>\n                        \n                        <FormLabel htmlFor=\"number\">\n                            Number\n                        <FormInput\n                            id=\"number\"\n                            name=\"number\"\n                            type=\"text\"\n                        \n                            {...formik.getFieldProps('number')}\n                            />\n                        </FormLabel>\n                        <div>\n                            {formik.touched.number && formik.errors.number ? (\n             <ErrorMessage>{formik.errors.number}</ErrorMessage>\n           ) : null}\n                        </div>\n\n                </InputsWrapper>\n                \n                <ButtonsWrapper>\n                     <CancelButton \n                     type='button'\n                     onClick={onClose}\n                                >Cancel</CancelButton>\n                                \n                    <ConfirmButton \n                    type='submit'>Confirm</ConfirmButton>\n                </ButtonsWrapper>\n            \n                </form>)}\n                </Formik> \n    )\n};\n\nEditContactForm.propTypes = {\n    id: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default EditContactForm;","import styled from 'styled-components';\n\nconst LiItem = styled.li`\n  list-style-type: none;\n  width: 340px;\n  display: flex;\n  justify-content: space-between;\n  font-weight: 500;\n    font-size: 16px;\n    color: ${props => props.theme.darkBlue};\n\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nconst ActionButton = styled.button`\n  padding: 0;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  :not(:first-child) {\nmargin-left: 8px;\n  }\n`;\nconst ButtonsWrapper = styled.div`\n  display: flex;\n`\n\nexport { ActionButton, LiItem, ButtonsWrapper };","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport EditContactForm from 'components/EditContactForm';\nimport { ImCancelCircle } from 'react-icons/im';\nimport { FiEdit } from 'react-icons/fi';\nimport { IconContext } from \"react-icons\";\nimport { ActionButton, LiItem, ButtonsWrapper } from './ListItem.styled';\nimport { useDeleteContactMutation } from '../../redux/ContactsOperations/ContactsOperations';\nimport { getToken } from 'redux/AuthSlice/AuthSlice';\nimport { useSelector } from 'react-redux';\n\n\nconst ListItem = ({ id, name, phone }) => {\n    const [editFormIsOpen, setEditFormIsOpen] = useState(false);\n    const [deleteContact] = useDeleteContactMutation();\n    const token = useSelector(getToken);\n   \n    return (\n        <>\n        <LiItem\n            id={id}\n            key={id}>\n            {name}: {phone}\n            <ButtonsWrapper>\n            <IconContext.Provider value={{ color: \"#00420b\", size: \"18px\" }}>\n             <ActionButton \n             type='button'\n             onClick={() => setEditFormIsOpen(true)} >\n                    <FiEdit />\n                        </ActionButton>\n                        \n                </IconContext.Provider>\n                <IconContext.Provider value={{ color: \"#bc2525\", size: \"18px\" }}>\n                <ActionButton type='button'\n                    onClick={()=> deleteContact({contactId: id, token: token})}>\n                    <ImCancelCircle />\n                </ActionButton>\n                </IconContext.Provider>\n                </ButtonsWrapper>\n            </LiItem>\n            \n            {editFormIsOpen &&\n              <div>\n                    <EditContactForm\n                        onClose={() => setEditFormIsOpen(false)}\n                        id={id}\n                    />\n                   </div>\n               }\n            </>\n    )\n};\n\nListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n}\n\nexport default ListItem;","import styled from 'styled-components';\n\nconst List = styled.ul`\n    width: 100%;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 0px;\n`\n\nexport { List };","import { useGetContactsQuery } from '../../redux/ContactsOperations/ContactsOperations';\nimport { useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/FilterSlice/FilterSlice';\nimport LiItem from '../ListItem';\nimport { List} from './ContactList.styled';\nimport { getToken } from 'redux/AuthSlice/AuthSlice';\n\nconst ContactList = () => {\n\n  const filter = useSelector(getFilterValue);\n  const token = useSelector(getToken);\n  const { data: contacts, isSuccess } = useGetContactsQuery(token, { skip: token === null });\n    \n  const getFilteredContacts = () => {\n  \n    if (isSuccess)\n      return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n\n    return (\n        <List>\n        {filteredContacts && filteredContacts.map(({ id, name, number }) => (\n            <LiItem\n                key={id}\n                id={id}\n                name={name}\n                phone={number}\n            ></LiItem>\n        ))}\n        </List>\n    )\n\n}\n\nexport default ContactList;","import styled from 'styled-components';\n\nconst WelcomeText = styled.p`\n    text-align: center;\n    font-weight: 600;\n    color: ${props => props.theme.darkGrey};\n`;\n\nconst UserEmail = styled.span`\nmargin-bottom: 8px;\n    font-size: 18px;\n    display: block;\n    color: ${props => props.theme.darkBlue};\n\n`\nconst LogOutBtn = styled.button`\nmargin-bottom: 30px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    border: 0.5px solid ${props => props.theme.red};\n    border-radius: 5px;\n    background-color: transparent;\n    color: ${props => props.theme.red};\n    cursor: pointer;\n`\n\nexport { WelcomeText, UserEmail, LogOutBtn };","import { WelcomeText, UserEmail, LogOutBtn } from \"./UserMenu.styled\";\nimport { useLogOutMutation } from 'redux/AuthOperations/AuthOperations';\nimport { getUserName, getToken } from '../../redux/AuthSlice/AuthSlice';\nimport { useSelector } from \"react-redux\";\n\n\nconst UserMenu = () => {\n    const name = useSelector(getUserName);\n    const token = useSelector(getToken)\n    const [logOut] = useLogOutMutation();\n    \n    return (\n        <div>\n            <LogOutBtn onClick={() => {\n                logOut(token);\n            }}>LogOut</LogOutBtn>\n            <WelcomeText><UserEmail>{name},</UserEmail>welcome to your</WelcomeText>\n            \n        </div>\n    )\n};\n\nexport default UserMenu;","import ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport UserMenu from 'components/UserMenu';\nimport { ThemeProvider } from 'styled-components';\nimport theme from '../../constants/theme';\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport {\n  PhonebookTitle,\n  ContactsTitle,\n  Section,\n  Note,\n} from './ContactsPage.styled';\nimport { getIsLoggedIn, getToken } from '../../redux/AuthSlice/AuthSlice';\nimport { useSelector } from \"react-redux\";\nimport { useGetContactsQuery } from '../../redux/ContactsOperations/ContactsOperations';\n\nconst ContactsPage = () => {\n\n  const token = useSelector(getToken);\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  const {\n    data: contacts,\n    isFetching,\n    isError,\n    isSuccess } = useGetContactsQuery(token, { skip: token === null });\n\n\n  return (\n      <ThemeProvider theme={theme}>\n          <>\n        <Section>\n          {isLoggedIn &&\n            <UserMenu />\n          }\n          <PhonebookTitle>Phonebook</PhonebookTitle>\n          <ContactForm/>\n        </Section>\n\n        <Section>\n          <ContactsTitle>Contacts</ContactsTitle>\n          <Filter />\n          \n          {isError && <Note>Oops! Something went wrong...</Note>} \n          \n          {isFetching && <Note><BeatLoader\n            color={theme.darkBlue} loading={true} size={10} margin={2} />\n          </Note>} \n      \n          {isSuccess && contacts.length === 0\n            && <Note>No contacts here</Note>}\n          \n          {isSuccess && <ContactList/>} \n        \n        </Section>\n              </>\n    </ThemeProvider>\n  );\n};\n\nexport default ContactsPage;"],"names":["FormLabel","styled","props","theme","darkGrey","FormInput","darkBlue","SubmitBtn","ErrorMessage","red","green","lightGray","contactValidationSchema","Yup","name","matches","required","number","token","useSelector","getToken","useAddContactMutation","addContact","contacts","useGetContactsQuery","skip","data","initialValues","validationSchema","onSubmit","values","actions","resetForm","some","contact","toLowerCase","alert","handleSubmit","formik","htmlFor","id","type","getFieldProps","touched","errors","dispatch","useDispatch","autoComplete","onChange","e","change","currentTarget","value","InputsWrapper","ButtonsWrapper","CancelButton","ConfirmButton","onClose","useEditContactMutation","editContact","find","contactId","onClick","LiItem","ActionButton","phone","useState","editFormIsOpen","setEditFormIsOpen","useDeleteContactMutation","deleteContact","color","size","List","filter","getFilterValue","isSuccess","filteredContacts","includes","trim","getFilteredContacts","map","WelcomeText","UserEmail","LogOutBtn","getUserName","useLogOutMutation","logOut","isLoggedIn","getIsLoggedIn","isFetching","isError","loading","margin","length"],"sourceRoot":""}